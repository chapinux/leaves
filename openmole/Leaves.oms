val alphaShape = Val[Double]
val thickness = Val[Double]
val decreaseRate = Val[Double]
val angle = Val[Double]
val nbBifurcation = Val[Double]
val angleRate = Val[Double]
val depth = Val[Double]

val area = Val[Double]
val perimeter = Val[Double]
val length = Val[Double]
val compacity = Val[Double]
val convexity = Val[Double]

def modelOutputs = Seq(area, perimeter, length, compacity, convexity)

val model =
  ScalaTask("""
    |import leaves._
    |val (area, perimeter, length, compacity, convexity) =
    |   leaves.Model(
    |     thickness,decreaseRate,angle,nbBifurcation.toInt,angleRate,depth.toInt)
    |""".stripMargin) set (
    plugins += pluginsOf(leaves.Model),
    inputs += (
        alphaShape,
        thickness,
        decreaseRate,
        angle,
        nbBifurcation,
        angleRate,
        depth),
    outputs += (area, perimeter, length, compacity, convexity),
    alphaShape := 10.0,
    thickness := 1.0,
    decreaseRate := 1.0,
    angle := 45.0,
    nbBifurcation := 1.0,
    angleRate := 1.0,
    depth := 7.0
  )

val env =
  SLURMEnvironment(
    "ubuntu",
    "134.158.75.56"
  )

// Plug everything together to create the workflow
(model on env hook ToStringHook())
