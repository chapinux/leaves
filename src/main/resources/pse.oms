import _file_.Leaves._

def modelOutputs = Seq(area, perimeter, length)

val pse =
  PSE(
    genome = Seq(
        alphaShape in (10.0, 100.0),
        thickness0 in (1.0, 10.0),
        decreaseRate0 in (0.5, 1.5),
        angle0 in (0.0, 180.0),
        nbBifurcation0 in (1.0, 6.0),
        sterilityRate0 in (0.0, 1.0),
        thickness1 in (1.0, 10.0),
        decreaseRate1 in (0.5, 1.5),
        angle1 in (0.0, 180.0),
        nbBifurcation1 in (0.0, 6.0),
        sterilityRate1 in (0.0, 1.0),
        thickness2 in (1.0, 10.0),
        decreaseRate2 in (0.5, 1.5),
        angle2 in (0.0, 180.0),
        nbBifurcation2 in (0.0, 6.0),
        sterilityRate2 in (0.0, 1.0),
        thickness3 in (1.0, 10.0),
        decreaseRate3 in (0.5, 1.5),
        angle3 in (0.0, 180.0),
        nbBifurcation3 in (0.0, 6.0),
        sterilityRate3 in (0.0, 1.0),
        thickness4 in (1.0, 10.0),
        decreaseRate4 in (0.5, 1.5),
        angle4 in (0.0, 180.0),
        nbBifurcation4 in (0.0, 6.0),
        sterilityRate4 in (0.0, 1.0)
        ),
    objectives =  Seq(
      area in (0.0 to 20000.0 by 1000.0),
      length in (0.0 to 20000.0 by 1000.0)
      )
 )

//val env = LocalEnvironment(4)

val evolution =
  SteadyStateEvolution(
    algorithm = pse,
    evaluation = model,
    parallelism = 1000,
    termination = 100000
  )

val env = EGIEnvironment("vo.complex-systems.eu")

// Define a hook to save the Pareto frontier
val savePopulationHook = SavePopulationHook(evolution, workDirectory / "pse_egi")


// Plug everything together to create the workflow
(evolution on env hook savePopulationHook)